datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  age       Int
  trans     Trans[]
  status    Boolean  @default(true)
  trash     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trans {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  receiver  String
  status    Boolean  @default(true)
  trash     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id         Int                @id @default(autoincrement())
  title      String
  categories CategoriesOnPost[]
  status     Boolean            @default(true)
  trash      Boolean            @default(false)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model Category {
  id        Int                @id @default(autoincrement())
  name      String
  posts     CategoriesOnPost[]
  status    Boolean            @default(true)
  trash     Boolean            @default(false)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model CategoriesOnPost {
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  status     Boolean  @default(true)
  trash      Boolean  @default(false)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([postId, categoryId])
}

// Relational data

// model Student {
//     id Int @id @default(autoincrement())
//     name String
//     roll String @unique
//     location String?
//     age Int?
//     gender String?
//     books Books?
//     status Boolean @default(true)
//     trash Boolean @default(false)
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

// }

// model Books {
//     id Int @id @default(autoincrement())
//     name String
//     author String 
//     type String?
//     status Boolean @default(true)
//     trash Boolean @default(false)

//     student Student @relation(fields: [studentId], references: [id])
//     studentId Int @unique
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

// } 
